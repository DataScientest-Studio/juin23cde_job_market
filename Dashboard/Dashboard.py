"""
    @author: lnasri
"""

import dash
from dash import html
from dash import dcc
import plotly
import plotly.graph_objects as go
from dash.dependencies import Input, Output, State
import dash_table
import pandas as pd
import numpy as np
import folium
import json
import os
from PIL import Image
from pathlib import Path
from elasticsearch import Elasticsearch
import plotly.express as px


# Elasticsearch connection
es = Elasticsearch(['http://localhost:9200'])

# Build the query to get the total size of the index
total_docs = es.count(index='adzuna_jobs')["count"]


pil_image = Image.open("/Dashboard/2018095159_strategie-de-recherche-d-emploi.png")


# the path to the word list generated by the Technos.py script 
tech_path = "/data/Technos/github_web_fws4_2024-03.json"
words = []
if os.path.exists(tech_path):
    with open(tech_path, encoding="utf-8") as infile:
        json_data_adzuna = json.load(infile)
        for data in json_data_adzuna:
            words.append(data) 

# keyword search request
request = {
    "query": {
        "match": {
            "description": " ".join(words)
        }
    }
}
#
documents = []
# retrieve search results
resultats = es.search(index="adzuna_jobs", body=request, size=total_docs)
for hit in resultats['hits']['hits']:
    found_words = hit['_source']['description']
    for word in found_words:
        # save words in a list
        cleaned_words = {wrd for wrd in word.replace(',', " ").replace('-', " ").replace('.'," ").split() if wrd in words}
        hit['_source']['description'] = ', '.join(list(cleaned_words))
    documents.append(hit['_source'])
        
# dataframe
df = pd.DataFrame(documents)
# rename column description
df = df.rename(columns={'description': 'technologies'})

titles = [{'label': loc, 'value': loc} for loc in df['title'].unique()]
# Dash
app = dash.Dash(__name__)

# Function to generate Dash application layout
def generate_layout():
    return html.Div([
         html.Div([
        # le titre avec H4 
        html.Img(src=pil_image, style={'width': '1850px', 'height': '600px'}),
        html.Div([
        html.H4("Choisissez le métier"),
        dcc.Dropdown(
            id='title',
            options= titles,
            value= 'Ingénieur DevOps Data H/F',
             )],style={
                    'margin-bottom' : '70px',
                    'width':'50%',
                    'border': '2px solid #eee',
                    'border-radius': '10px',
                    'padding': '30px 30px 30px 120px',
                    'box-shadow': '2px 2px 3px #ccc',
                    'display': 'block',
                    'margin-left': 'auto',
                    'margin-right': 'auto'
                 })
              ]),
        
        html.Div([
         dcc.Tabs(id = 'tabs', value = "tab-1", children=[
             # General info tab
            dcc.Tab(label='infos Générales', children=[
                    html.Div([
                     html.H3("Emploi")
                        ], style={'margin': '30px',
                                  'background':'rgb(0,139,139)',
                                'color':'white',
                                  'textAlign':'center',
                                  'padding':'8px 5px 8px 0px'}),
                 
                 
                     # data table
                    dash_table.DataTable(id='tbl_out', 
                                          editable=True,
                                        #   filter_action="native",
                                        sort_action="native",
                                        sort_mode='multi',
                                          row_selectable='multi',
                                          selected_rows=[],
                                          page_action='native',
                                        page_current= 0,
                                        page_size= 10,
                                        #   style_table={'overflowX': 'auto'},
                                           
                                            
                                            ),
                    #  html.Div(id='output'),
                     html.Div(
                       id='datatable-row-ids-container'
                         ),
                 html.Div(id = "map", style={
                     'display':'inline-block','verticalAlign':'top','width':'50%', 
                                            'padding':'15px 0px 15px 10px'
                 })
             ]),
             # Jobs tab
            dcc.Tab(label='Compétences'),
             # Salary tab
            dcc.Tab(label='Salaire')
         ])
     ])
        
       
    ])

# Callback function to update data table
@app.callback(
    Output('tbl_out', 'data'),
    [Input('title', 'value')],
    # State("output", "value") 
    )
def update_data_table(titre_choisie):
    
    df_col_name = df[[ 'contract','company','title','location', "salary_max", "salary_min", "latitude","longitude", "created", "technologies"]]
    df_cond = df_col_name[df_col_name['title'] == titre_choisie]
    to_df = pd.DataFrame(df_cond)
    data =to_df.to_dict("records")
    
    return data


@app.callback(
    Output('map', 'children'),
    Input('tbl_out', 'data'),
    Input('tbl_out', 'columns'),
    Input('tbl_out', 'derived_virtual_selected_rows'),
    Input('tbl_out', 'selected_row'),
    Input('tbl_out', 'active_cell')
   )
def update_graphs(rows,columns, selected_row, derived_virtual_selected_rows, active_cell):
    
    if selected_row :
        latitude = rows[selected_row[0]]['latitude']
        longitude = rows[selected_row[0]]['longitude']
        location_choisie = rows[selected_row[0]]['location']
    else: 
        print("ko")
    
    if latitude and longitude is not None:
        carte = folium.Map(location= (latitude, longitude ), zoom_start=6 )
        marker = folium.Marker(location=[latitude, longitude])
        marker.add_to(carte)
        
        file_locs = f"/Dashboard/locations{location_choisie}.html"
        
        if not os.path.isfile(file_locs):
            carte.save(file_locs)
    
    
    return html.Iframe(srcDoc= open(file_locs, 'r').read(), width='100%',height='600')
    



# Define the layout of the Dash application
app.layout = generate_layout()

if __name__ == '__main__':
    app.run_server(debug=True)
